/*
 * GA4GH Tool Discovery API
 *
 * Proposed API for GA4GH (Global Alliance for Genomics & Health) tool repositories. A tool consists of a set of container images that are paired with a set of documents. Examples of documents include CWL (Common Workflow Language), WDL (Workflow Description Language), NFL (Nextflow), GXFORMAT2 (Galaxy) or SMK (Snakemake) that describe how to use those images and a set of specifications for those images (examples are Dockerfiles or Singularity recipes) that describe how to reproduce those images in the future. We use the following terminology, a \"container image\" describes a container as stored at rest on a filesystem, a \"tool\" describes one of the triples as described above. In practice, examples of \"tools\" include CWL CommandLineTools, CWL Workflows, WDL workflows, and Nextflow workflows that reference containers in formats such as Docker or Singularity.
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

#![allow(unused_imports)]
#![allow(clippy::empty_docs)]
use crate::clients::trs::models;
use serde::{Deserialize, Serialize};

/// ToolVersion : A tool version describes a particular iteration of a tool as described by a reference to a specific image and/or documents.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ToolVersion {
    /// Contact information for the author of this version of the tool in the registry. (More complex authorship information is handled by the descriptor).
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<String>>,
    /// The name of the version.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The URL for this tool version in this registry.
    #[serde(rename = "url")]
    pub url: String,
    /// An identifier of the version of this tool for this particular tool registry.
    #[serde(rename = "id")]
    pub id: String,
    /// This version of a tool is guaranteed to not change over time (for example, a  tool built from a tag in git as opposed to a branch). A production quality tool  is required to have a checksum
    #[serde(rename = "is_production", skip_serializing_if = "Option::is_none")]
    pub is_production: Option<bool>,
    /// All known docker images (and versions/hashes) used by this tool. If the tool has to evaluate any of the docker images strings at runtime, those ones cannot be reported here.
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<models::ImageData>>,
    /// The type (or types) of descriptors available.
    #[serde(rename = "descriptor_type", skip_serializing_if = "Option::is_none")]
    pub descriptor_type: Option<Vec<models::DescriptorType>>,
    /// A map providing information about the language versions used in this tool. The keys should be the same values used in the `descriptor_type` field, and the value should be an array of all the language versions used for the given `descriptor_type`. Depending on the `descriptor_type` (e.g. CWL) multiple version values may be used in a single tool.
    #[serde(rename = "descriptor_type_version", skip_serializing_if = "Option::is_none")]
    pub descriptor_type_version: Option<std::collections::HashMap<String, Vec<String>>>,
    /// Reports if this tool has a containerfile available. (For Docker-based tools, this would indicate the presence of a Dockerfile)
    #[serde(rename = "containerfile", skip_serializing_if = "Option::is_none")]
    pub containerfile: Option<bool>,
    /// The version of this tool version in the registry. Iterates when fields like the description, author, etc. are updated.
    #[serde(rename = "meta_version", skip_serializing_if = "Option::is_none")]
    pub meta_version: Option<String>,
    /// Reports whether this tool has been verified by a specific organization or individual.
    #[serde(rename = "verified", skip_serializing_if = "Option::is_none")]
    pub verified: Option<bool>,
    /// Source of metadata that can support a verified tool, such as an email or URL.
    #[serde(rename = "verified_source", skip_serializing_if = "Option::is_none")]
    pub verified_source: Option<Vec<String>>,
    /// Reports whether this version of the tool has been signed.
    #[serde(rename = "signed", skip_serializing_if = "Option::is_none")]
    pub signed: Option<bool>,
    /// An array of IDs for the applications that are stored inside this tool.
    #[serde(rename = "included_apps", skip_serializing_if = "Option::is_none")]
    pub included_apps: Option<Vec<String>>,
}

impl ToolVersion {
    /// A tool version describes a particular iteration of a tool as described by a reference to a specific image and/or documents.
    pub fn new(url: String, id: String) -> ToolVersion {
        ToolVersion {
            author: None,
            name: None,
            url,
            id,
            is_production: None,
            images: None,
            descriptor_type: None,
            descriptor_type_version: None,
            containerfile: None,
            meta_version: None,
            verified: None,
            verified_source: None,
            signed: None,
            included_apps: None,
        }
    }
}


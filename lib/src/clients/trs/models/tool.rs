/*
 * GA4GH Tool Discovery API
 *
 * Proposed API for GA4GH (Global Alliance for Genomics & Health) tool repositories. A tool consists of a set of container images that are paired with a set of documents. Examples of documents include CWL (Common Workflow Language), WDL (Workflow Description Language), NFL (Nextflow), GXFORMAT2 (Galaxy) or SMK (Snakemake) that describe how to use those images and a set of specifications for those images (examples are Dockerfiles or Singularity recipes) that describe how to reproduce those images in the future. We use the following terminology, a \"container image\" describes a container as stored at rest on a filesystem, a \"tool\" describes one of the triples as described above. In practice, examples of \"tools\" include CWL CommandLineTools, CWL Workflows, WDL workflows, and Nextflow workflows that reference containers in formats such as Docker or Singularity.
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

#![allow(unused_imports)]
#![allow(clippy::empty_docs)]
use crate::clients::trs::models;
use serde::{Deserialize, Serialize};

/// Tool : A tool (or described tool) is defined as a tuple of a descriptor file (which potentially consists of multiple files), a set of container images, and a set of instructions for creating those images.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Tool {
    /// The URL for this tool in this registry.
    #[serde(rename = "url")]
    pub url: String,
    /// A unique identifier of the tool, scoped to this registry.
    #[serde(rename = "id")]
    pub id: String,
    /// Support for this parameter is optional for tool registries that support aliases. A list of strings that can be used to identify this tool which could be  straight up URLs.  This can be used to expose alternative ids (such as GUIDs) for a tool for registries. Can be used to match tools across registries.
    #[serde(rename = "aliases", skip_serializing_if = "Option::is_none")]
    pub aliases: Option<Vec<String>>,
    /// The organization that published the image.
    #[serde(rename = "organization")]
    pub organization: String,
    /// The name of the tool.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "toolclass")]
    pub toolclass: Box<models::ToolClass>,
    /// The description of the tool.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The version of this tool in the registry. Iterates when fields like the description, author, etc. are updated.
    #[serde(rename = "meta_version", skip_serializing_if = "Option::is_none")]
    pub meta_version: Option<String>,
    /// Whether this tool has a checker tool associated with it.
    #[serde(rename = "has_checker", skip_serializing_if = "Option::is_none")]
    pub has_checker: Option<bool>,
    /// Optional url to the checker tool that will exit successfully if this tool produced the expected result given test data.
    #[serde(rename = "checker_url", skip_serializing_if = "Option::is_none")]
    pub checker_url: Option<String>,
    /// A list of versions for this tool.
    #[serde(rename = "versions")]
    pub versions: Vec<models::ToolVersion>,
}

impl Tool {
    /// A tool (or described tool) is defined as a tuple of a descriptor file (which potentially consists of multiple files), a set of container images, and a set of instructions for creating those images.
    pub fn new(url: String, id: String, organization: String, toolclass: models::ToolClass, versions: Vec<models::ToolVersion>) -> Tool {
        Tool {
            url,
            id,
            aliases: None,
            organization,
            name: None,
            toolclass: Box::new(toolclass),
            description: None,
            meta_version: None,
            has_checker: None,
            checker_url: None,
            versions,
        }
    }
}


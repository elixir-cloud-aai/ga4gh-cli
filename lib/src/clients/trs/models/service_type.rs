/*
 * GA4GH Tool Discovery API
 *
 * Proposed API for GA4GH (Global Alliance for Genomics & Health) tool repositories. A tool consists of a set of container images that are paired with a set of documents. Examples of documents include CWL (Common Workflow Language), WDL (Workflow Description Language), NFL (Nextflow), GXFORMAT2 (Galaxy) or SMK (Snakemake) that describe how to use those images and a set of specifications for those images (examples are Dockerfiles or Singularity recipes) that describe how to reproduce those images in the future. We use the following terminology, a \"container image\" describes a container as stored at rest on a filesystem, a \"tool\" describes one of the triples as described above. In practice, examples of \"tools\" include CWL CommandLineTools, CWL Workflows, WDL workflows, and Nextflow workflows that reference containers in formats such as Docker or Singularity.
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

#![allow(unused_imports)]
#![allow(clippy::empty_docs)]
use crate::clients::trs::models;
use serde::{Deserialize, Serialize};

/// ServiceType : Type of a GA4GH service
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceType {
    /// Namespace in reverse domain name format. Use `org.ga4gh` for implementations compliant with official GA4GH specifications. For services with custom APIs not standardized by GA4GH, or implementations diverging from official GA4GH specifications, use a different namespace (e.g. your organization's reverse domain name).
    #[serde(rename = "group")]
    pub group: String,
    /// Name of the API or GA4GH specification implemented. Official GA4GH types should be assigned as part of standards approval process. Custom artifacts are supported.
    #[serde(rename = "artifact")]
    pub artifact: String,
    /// Version of the API or specification. GA4GH specifications use semantic versioning.
    #[serde(rename = "version")]
    pub version: String,
}

impl ServiceType {
    /// Type of a GA4GH service
    pub fn new(group: String, artifact: String, version: String) -> ServiceType {
        ServiceType {
            group,
            artifact,
            version,
        }
    }
}

